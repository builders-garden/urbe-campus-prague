{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/YourContract.sol": {
      "content": "import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ncontract UrbeCampusExample {\n\n    //USDC has 6 decimals \n    // i want to transfer 10 usdc\n    // 10 * 10^6 = 10000000\n\n    //1 -> 1000000\n    //0.1 -> 100000\n\n    //EVENTS\n    event NewDonation(address donor, uint256 amount, uint256 totalDonations);\n    event Withdrawal(address donor, uint256 amount, uint256 totalDonations);\n    event CreatorWithdraw(uint256 amount);\n\n    //STORAGE VARIABLES\n    uint256 public startTime;\n    uint256 public endTime;\n    uint256 public moneyRaised; //not initialized in constructor\n    uint256 public moneyGoal;\n    address public creator;\n    address public tokenAddress;\n    mapping(address => uint256) public donors;\n\n    constructor(address _creator, uint256 _startTime, uint256 _endTime, uint256 _moneyGoal, address _tokenAddress) {\n        require(_creator != address(0), \"Creator cannot be the zero address\");\n        require(_startTime > block.timestamp, \"Start time must be in the future\");\n        require(_endTime > _startTime, \"End time must be after start time\");\n        require(_moneyGoal > 0, \"Money goal must be greater than 0\");\n        require(_tokenAddress != address(0), \"Token address cannot be the zero address\");\n        creator = _creator;\n        tokenAddress = _tokenAddress;\n        startTime = _startTime;\n        endTime = _endTime;\n        moneyGoal = _moneyGoal;\n    }\n\n    function donate(uint256 amount) public {\n        validateDonation(msg.sender, amount);\n\n        moneyRaised += amount; //-> moneyRaised = moneyRaised + amount\n        donors[msg.sender] += amount; //-> donors[msg.sender] = donors[msg.sender] + amount\n\n        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\n        emit NewDonation(msg.sender, amount, moneyRaised);\n    }\n\n    function withdrawFunds() public {\n        require(block.timestamp < endTime, \"Campaign ended\");\n        require(donors[msg.sender] > 0, \"No funds to withdraw\");\n        \n        uint256 amountToWithdraw = donors[msg.sender];\n\n        moneyRaised -= amountToWithdraw; //-> moneyRaised = moneyRaised - amountToWithdraw\n        donors[msg.sender] = 0; \n\n        require(IERC20(tokenAddress).transfer(msg.sender, amountToWithdraw), \"Transfer failed\");\n        emit Withdrawal(msg.sender, amountToWithdraw, moneyRaised);\n    }\n\n    function creatorWithdraw()public {\n        require(msg.sender == creator, \"Only creator can withdraw\");\n        require(block.timestamp >= endTime || moneyRaised == moneyGoal, \"Campaign not ended or goal not reached\");\n\n        require(IERC20(tokenAddress).transfer(creator, moneyRaised), \"Transfer failed\");\n        emit CreatorWithdraw(moneyRaised);\n    } \n\n\n    function validateDonation(address _donor, uint256 _amount) internal {\n        require(block.timestamp >= startTime, \"Campaign not started\");\n        require(block.timestamp < endTime, \"Campaign ended\");\n        require(_amount > 0, \"Amount must be greater than 0\");\n        require(moneyRaised + _amount <= moneyGoal, \"Campaign goal reached\");\n        \n    }\n\n\n\n\n\n    //uint8 2^8 = 256\n    //uint16 2^16 = 65536\n    //uint32 2^32 = 4294967296\n    //uint64 2^64 = 18446744073709551616\n    //uint128 2^128 = 340282366920938463463374607431768211456\n    //uint256 2^256 = 115792089237316195423570985008687907853269984665640564039457584007913129639936\n\n    \n    \n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}