{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/Crowdfunding.sol": {
      "content": "import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title Crowdfunding\n * @notice A crowdfunding contract that allows users to donate ERC20 tokens to reach a funding goal\n * @dev This contract manages a time-bound crowdfunding campaign with withdrawal capabilities\n */\ncontract Crowdfunding {\n    // CUSTOM ERRORS\n    error ZeroAddress();\n    error StartTimeInPast();\n    error EndTimeBeforeStartTime();\n    error ZeroGoal();\n    error CampaignNotStarted();\n    error CampaignEnded();\n    error ZeroAmount();\n    error GoalReached();\n    error TransferFailed();\n    error NoFundsToWithdraw();\n    error OnlyCreator();\n    error CampaignNotEndedOrGoalNotReached();\n\n    // EVENTS\n    /**\n     * @notice Emitted when a new donation is made\n     * @param donor The address of the donor\n     * @param amount The amount donated\n     * @param totalDonations The total amount raised after this donation\n     */\n    event NewDonation(address indexed donor, uint256 amount, uint256 totalDonations);\n    \n    /**\n     * @notice Emitted when a donor withdraws their funds\n     * @param donor The address of the donor withdrawing\n     * @param amount The amount withdrawn\n     * @param totalDonations The total amount raised after withdrawal\n     */\n    event Withdrawal(address indexed donor, uint256 amount, uint256 totalDonations);\n    \n    /**\n     * @notice Emitted when the creator withdraws the raised funds\n     * @param amount The amount withdrawn by the creator\n     */\n    event CreatorWithdraw(uint256 amount);\n\n    // STORAGE VARIABLES\n    /// @notice The timestamp when the campaign starts\n    uint256 public startTime;\n    \n    /// @notice The timestamp when the campaign ends\n    uint256 public endTime;\n    \n    /// @notice The total amount of money raised so far\n    uint256 public moneyRaised;\n    \n    /// @notice The funding goal for the campaign\n    uint256 public moneyGoal;\n    \n    /// @notice The address of the campaign creator\n    address public creator;\n    \n    /// @notice The address of the ERC20 token used for donations\n    address public tokenAddress;\n    \n    /// @notice Mapping of donor addresses to their donation amounts\n    mapping(address => uint256) public donors;\n\n    /**\n     * @notice Constructor to initialize the crowdfunding campaign\n     * @param _creator The address of the campaign creator\n     * @param _startTime The timestamp when the campaign starts\n     * @param _endTime The timestamp when the campaign ends\n     * @param _moneyGoal The funding goal for the campaign\n     * @param _tokenAddress The address of the ERC20 token to be used\n     */\n    constructor(\n        address _creator,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _moneyGoal,\n        address _tokenAddress\n    ) {\n        if (_creator == address(0)) revert ZeroAddress();\n        if (_startTime <= block.timestamp) revert StartTimeInPast();\n        if (_endTime <= _startTime) revert EndTimeBeforeStartTime();\n        if (_moneyGoal == 0) revert ZeroGoal();\n        if (_tokenAddress == address(0)) revert ZeroAddress();\n        \n        creator = _creator;\n        tokenAddress = _tokenAddress;\n        startTime = _startTime;\n        endTime = _endTime;\n        moneyGoal = _moneyGoal;\n    }\n\n    /**\n     * @notice Allows users to donate ERC20 tokens to the campaign\n     * @param amount The amount of tokens to donate\n     * @dev Requires the campaign to be active and not exceed the goal\n     */\n    function donate(uint256 amount) public {\n        if (block.timestamp < startTime) revert CampaignNotStarted();\n        if (block.timestamp >= endTime) revert CampaignEnded();\n        if (amount == 0) revert ZeroAmount();\n        if (moneyRaised + amount > moneyGoal) revert GoalReached();\n\n        moneyRaised += amount;\n        donors[msg.sender] += amount;\n\n        if (!IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount)) {\n            revert TransferFailed();\n        }\n        \n        emit NewDonation(msg.sender, amount, moneyRaised);\n    }\n\n    /**\n     * @notice Allows donors to withdraw their funds before the campaign ends\n     * @dev Only callable by donors who have contributed and before campaign ends\n     */\n    function withdrawFunds() public {\n        if (block.timestamp >= endTime) revert CampaignEnded();\n        if (donors[msg.sender] == 0) revert NoFundsToWithdraw();\n        \n        uint256 amountToWithdraw = donors[msg.sender];\n\n        moneyRaised -= amountToWithdraw;\n        donors[msg.sender] = 0;\n\n        if (!IERC20(tokenAddress).transfer(msg.sender, amountToWithdraw)) {\n            revert TransferFailed();\n        }\n        \n        emit Withdrawal(msg.sender, amountToWithdraw, moneyRaised);\n    }\n\n    /**\n     * @notice Allows the creator to withdraw all raised funds\n     * @dev Only callable by creator after campaign ends or goal is reached\n     */\n    function creatorWithdraw() public {\n        if (msg.sender != creator) revert OnlyCreator();\n        if (block.timestamp < endTime && moneyRaised != moneyGoal) {\n            revert CampaignNotEndedOrGoalNotReached();\n        }\n\n        uint256 amountToWithdraw = moneyRaised;\n        moneyRaised = 0;\n\n        if (!IERC20(tokenAddress).transfer(creator, amountToWithdraw)) {\n            revert TransferFailed();\n        }\n        \n        emit CreatorWithdraw(amountToWithdraw);\n    }\n\n    /**\n     * @notice Returns the remaining time until campaign ends\n     * @return The number of seconds remaining, or 0 if campaign has ended\n     */\n    function getRemainingTime() public view returns (uint256) {\n        if (block.timestamp >= endTime) {\n            return 0;\n        }\n        return endTime - block.timestamp;\n    }\n\n    /**\n     * @notice Returns the remaining amount needed to reach the goal\n     * @return The amount still needed to reach the funding goal\n     */\n    function getRemainingGoal() public view returns (uint256) {\n        if (moneyRaised >= moneyGoal) {\n            return 0;\n        }\n        return moneyGoal - moneyRaised;\n    }\n\n    /**\n     * @notice Checks if the campaign is currently active\n     * @return True if the campaign is active, false otherwise\n     */\n    function isCampaignActive() public view returns (bool) {\n        return block.timestamp >= startTime && block.timestamp < endTime;\n    }\n\n    /**\n     * @notice Checks if the funding goal has been reached\n     * @return True if the goal has been reached, false otherwise\n     */\n    function isGoalReached() public view returns (bool) {\n        return moneyRaised >= moneyGoal;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}